Question, Answer
"What is the Twelve-Factor app's approach to development, staging, and production?","The Twelve-Factor app is designed for continuous deployment by keeping the gap between development and production small, by making the time gap small, the personnel gap small, and the tools gap small. Developers should keep development and production environments as similar as possible to ensure dev/prod parity. They should use the same type and version of each of the backing services across all deploys of the app.",
"What are the three gaps between development and production that the Twelve-Factor app addresses?","The three gaps between development and production that the Twelve-Factor app addresses are: the time gap, the personnel gap, and the tools gap.",
"What is dev/prod parity, and why is it important?","Dev/prod parity is the idea that development, staging, and production environments should be as similar as possible. It is important because differences between backing services can cause tiny incompatibilities that may cause code to fail in production after working in development or staging, creating friction that discourages continuous deployment.",
"What are some examples of libraries that simplify access to different types of backing services?","Examples of libraries that simplify access to different types of backing services are: ActiveRecord for Ruby/Rails for databases (MySQL, PostgreSQL, SQLite), Celery for Python/Django for queues (RabbitMQ, Beanstalkd, Redis), and ActiveSupport::Cache for Ruby/Rails for caching (memory, filesystem, Memcached).",
"Why should developers resist the urge to use different backing services between development and production, even if adapters theoretically abstract away any differences?","Developers should resist the urge to use different backing services between development and production because tiny incompatibilities can crop up, causing code that worked in development or staging to fail in production. This creates friction that disincentivizes continuous deployment. The cost of this friction and the subsequent dampening of continuous deployment is extremely high when considered in aggregate over the lifetime of an application.",
"Are lightweight local services still useful, and why or why not?","Lightweight local services are less compelling than they once were. Modern backing services such as Memcached, PostgreSQL, and RabbitMQ are not difficult to install and run thanks to modern packaging systems. Alternatively, declarative provisioning tools such as Chef and Puppet combined with light-weight virtual environments such as Docker and Vagrant allow developers to run local environments which closely approximate production environments. The cost of installing and using these systems is low compared to the benefit of dev/prod parity and continuous deployment."